#!/usr/bin/python3

import sys
import socket
import ssl
from ssl import SSLContext
from bs4 import BeautifulSoup

def make_http_request(url):
    # Parse the URL to get host and path
    if 'http://' in url:
        url = url.replace('http://', '', 1)
    elif 'https://' in url:
        url = url.replace('https://', '', 1)

    parts = url.split('/', 1) # Split the URL into two parts
    host = parts[0] # Get the host
    path = '/' + parts[1] if len(parts) > 1 else '/' # Get the path

    # Create a socket object
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connect to the server
    client_socket.connect((host, 80))

    # Construct the HTTP request
    request = f"GET {path} HTTP/1.1\r\nHost:{host}\r\nConnection: close\r\n\r\n"

    # Send the request
    client_socket.sendall(request.encode("utf-8"))

    # Receive the response
    response = b''
    while True:
        data = client_socket.recv(1024)
        if not data:
            break
        response += data

    # Close the socket
    client_socket.close()

    # Decode and print the response
    print(response.decode("latin-1"))

    # Parse the response using BeautifulSoup
    soup = BeautifulSoup(response, 'html.parser')
    
    if soup.title.string == "301 Moved Permanently":

        print("Redirecting to HTTPS...\n")
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        ssl_socket = ssl.wrap_socket(client_socket, ssl_version=ssl.PROTOCOL_TLS)
        ssl_socket.connect((host, 443))
        ssl_socket.sendall(request.encode("utf-8"))

        response = b''
        while True:
            data = ssl_socket.recv(1024)
            if not data:
                break
            response += data


        ssl_socket.close()
        print(response.decode("latin-1"))

def main():
    # Check if the correct number of arguments is provided
    if len(sys.argv) > 3 or len(sys.argv) < 1 or sys.argv[1] == "-h":
        print("Help:\n    go2web -u <URL>         # make an HTTP request to the specified URL and print the response \n    go2web -s <search-term> # make an HTTP request to search the term using your favorite search engine and print top 10 results \n    go2web -h               # show this help \n")
        return
    

    if sys.argv[1] == "-u":
        # Get the URL from the command-line argument
        url = sys.argv[2]

        # Make the HTTP request
        make_http_request(url)

if __name__ == "__main__":
    main()
