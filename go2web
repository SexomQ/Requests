#!/usr/bin/python3

import sys
import socket
import ssl
from ssl import SSLContext
from bs4 import BeautifulSoup
import warnings

# Ignore DeprecationWarning
warnings.filterwarnings('ignore', category=DeprecationWarning)

def return_content(response):
    # Decode and print the response
    soup = BeautifulSoup(response, 'html.parser')

    # Extract content from the response
    content = soup.find_all(['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'a'])

    # Print the content
    for tag in content:
        print(" ")
        if tag.name == 'h1' or tag.name == 'h2' or tag.name == 'h3' or tag.name == 'h4' or tag.name == 'h5' or tag.name == 'h6':
            print("\n")
   
        else:
            if tag.name == 'ul':
                for li in tag.find_all('li'):
                    print("-", li.get_text())
            print(tag.get_text())

        if tag.name == 'h1' or tag.name == 'h2' or tag.name == 'h3' or tag.name == 'h4' or tag.name == 'h5' or tag.name == 'h6':
            print("\n")

def return_search_results(response):
    # Get top 10 search results
    soup = BeautifulSoup(response, 'html.parser')
    results = soup.find_all('li', class_='b_algo')

    # Print the search results
    for i, result in enumerate(results):
        if i == 10:
            break
        else:
            print(f"{i+1}. {result.h2.get_text()}")
            link = result.find('cite')
            print(f"   {link.get_text()}")
            description = result.find('p')
            print(f"   {description.get_text()}\n")
        

def make_http_request(url):
    # Parse the URL to get host and path
    if 'http://' in url:
        url = url.replace('http://', '', 1)
    elif 'https://' in url:
        url = url.replace('https://', '', 1)

    parts = url.split('/', 1) # Split the URL into two parts
    host = parts[0] # Get the host
    path = '/' + parts[1] if len(parts) > 1 else '/' # Get the path

    # Create a socket object
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connect to the server
    client_socket.connect((host, 80))

    # Construct the HTTP request
    request = f"GET {path} HTTP/1.1\r\nHost:{host}\r\nConnection: close\r\n\r\n"

    # Send the request
    client_socket.sendall(request.encode("utf-8"))

    # Receive the response
    response = b''
    while True:
        data = client_socket.recv(1024)
        if not data:
            break
        response += data

    # Close the socket
    client_socket.close()

    # Decode and print the response
    # print(response.decode("latin-1"))

    # Parse the response using BeautifulSoup
    soup = BeautifulSoup(response, 'html.parser')
    
    if soup.title.string == "301 Moved Permanently":

        print("Redirecting to HTTPS...\n")
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        ssl_socket = ssl.wrap_socket(client_socket, ssl_version=ssl.PROTOCOL_TLS)
        ssl_socket.connect((host, 443))
        ssl_socket.sendall(request.encode("utf-8"))

        response = b''
        while True:
            data = ssl_socket.recv(1024)
            if not data:
                break
            response += data


        ssl_socket.close()
    
    return response

def search(search_term):
    # Parse the search term
    search_term = search_term.replace(' ', '+')

    # Make an HTTP request to search the term using Bing
    make_http_request(f"https://www.bing.com/search?q={search_term}")

    return

def main():
    # Check if the correct number of arguments is provided
    if len(sys.argv) > 5 or len(sys.argv) < 1 or sys.argv[1] == "-h":
        print("Help:\n    go2web -u <URL>         # make an HTTP request to the specified URL and print the response \n    go2web -s <search-term> # make an HTTP request to search the term using your favorite search engine and print top 10 results \n    go2web -h               # show this help \n")
        return
    

    if sys.argv[1] == "-u" and len(sys.argv) == 3:
        # Get the URL from the command-line argument
        url = sys.argv[2]

        # Make the HTTP request
        content = make_http_request(url)

        # Print the content
        return_content(content)

        return

    elif sys.argv[1] == "-s" and len(sys.argv) == 3:
        # Get the search term from the command-line argument
        search_term = sys.argv[2]
        search_term = search_term.replace(" ", "+")
        print(f"Searching for: {search_term}")

        # Make the HTTP request
        results = make_http_request(f"https://www.bing.com/search?q={search_term}")

        # Print the search results
        return_search_results(results)

    elif sys.argv[1] == '-u' and sys.argv[3] == '-s' and len(sys.argv) == 5:
        # Get the URL from the command-line argument
        url = sys.argv[2]

        # Get the search term from the command-line argument
        search_term = sys.argv[4]
        search_term = search_term.replace(" ", "+")
        print(f"Searching for: {search_term}")

        # Make the HTTP request
        results = make_http_request(f"{url}/search?q={search_term}")

        # Print the search results
        return_content(results)
    

if __name__ == "__main__":
    main()
